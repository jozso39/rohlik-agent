// interactive.ts - Interactive CLI interface for the LangGraph MCP agent

import { BaseMessage, HumanMessage } from "@langchain/core/messages";
import { app } from "./agent.ts";
import { clearShoppingListTool } from "./tools/mcpTools.ts";
import { checkMCPServer } from "./utils/mcpHealthCheck.ts";
import { loadEnv } from "./utils/loadEnv.ts";

const goodbyeMessage =
    "\nüëã Naschledanou! V√°≈° n√°kupn√≠ seznam byl vyƒçi≈°tƒõn. D√≠ky ≈æe jste vyu≈æili RohBota!";

// Store conversation history
let conversationHistory: BaseMessage[] = [];

console.log(
    "ü§ñ Rohl√≠k Asistent pro pl√°nov√°n√≠ j√≠deln√≠ƒçku a spr√°vu n√°kupn√≠ho seznamu (RohBot)",
);
console.log("====================================================");
console.log(
    "üí¨ Pom≈Ø≈æu ti napl√°novat tv≈Øj j√≠deln√≠ƒçek podle exkluzivn√≠ch rohl√≠kovsk√Ωch recept≈Ø!",
);
console.log("M≈Ø≈æe≈° mi porouƒçet nap≈ô√≠klad takto:");
console.log("   ‚Ä¢ 'p≈ôiprav mi t√Ωdenn√≠ pl√°n vegetari√°nsk√Ωch j√≠del'");
console.log("   ‚Ä¢ 'vytvo≈ô mi dokument s j√≠deln√≠ƒçkem na 2 dny pro vegana'");
console.log("   ‚Ä¢ 'p≈ôidej mrkev na n√°kupn√≠ seznam'");
console.log("   ‚Ä¢ 'najdi mi recepty na vegetari√°nsk√© pol√©vky'");
console.log("   ‚Ä¢ 'co je na m√©m n√°kupn√≠m seznamu?'");
console.log("   ‚Ä¢ 'odstra≈à v≈°e z n√°kupn√≠ho seznamu'");
console.log("   ‚Ä¢ 'odstra≈à okurku z n√°kupn√≠ho seznamu'");
console.log("üìù Napi≈° 'KONEC' nebo 'STAƒåILO' k ukonƒçen√≠ programu,");
console.log(
    "nebo 'POMOC' pro n√°povƒõdu, nebo 'RESET' pro restart konverzace.\n",
);

async function cleanShopingList() {
    try {
        await clearShoppingListTool.func({});
    } catch (error) {
        console.log(
            "‚ö†Ô∏è Warning: Could not clear shopping list:",
            error instanceof Error ? error.message : "Unknown error",
        );
    }
}

// Function to read user input from stdin
async function readInput(): Promise<string> {
    const decoder = new TextDecoder();
    const buffer = new Uint8Array(1024);

    Deno.stdout.write(new TextEncoder().encode("üë§: "));
    const n = await Deno.stdin.read(buffer);

    if (n === null) {
        return "";
    }

    return decoder.decode(buffer.subarray(0, n)).trim();
}

// Function to process user input
async function processUserInput(userInput: string) {
    if (
        userInput.toLowerCase().trim() === "konec" ||
        userInput.toLowerCase().trim() === "staƒçilo"
    ) {
        await cleanShopingList();
        console.log(goodbyeMessage);
        Deno.exit(0);
    }

    if (userInput.toLowerCase().trim() === "reset") {
        conversationHistory = [];
        await cleanShopingList();
        console.log("üßπ Konverzace restartov√°na a n√°kupn√≠ seznam vyƒçi≈°tƒõn.");
        return;
    }

    if (userInput.toLowerCase().trim() === "pomoc") {
        console.log("\nüÜò Mo≈ænosti:");
        console.log(
            "   ‚Ä¢ Bavte se p≈ôirozenƒõ s agentem, ptejte se na recepty a p≈ô√≠pravu j√≠deln√≠ƒçku nebo o upraven√≠ n√°kupn√≠ho seznamu.",
        );
        console.log("üìù Napi≈° 'KONEC' nebo 'STAƒåILO' k ukonƒçen√≠ programu,");
        console.log(
            "nebo 'POMOC' pro n√°povƒõdu, nebo 'RESET' pro restart konverzace.\n",
        );
        return;
    }

    if (!userInput.trim()) {
        return;
    }

    try {
        console.log("ü§î P≈ôem√Ω≈°l√≠m...\n");

        // Add user message to history
        const userMessage = new HumanMessage(userInput);
        const messages = [...conversationHistory, userMessage];

        // Stream response from agent with token-level streaming
        const eventStream = app.streamEvents({ messages }, { version: "v2" });

        let isStreamingContent = false;
        let currentContent = "";
        let finalMessages: BaseMessage[] = [];

        for await (const event of eventStream) {
            // Handle LLM token streaming
            if (
                event.event === "on_chat_model_stream" &&
                event.data?.chunk?.content
            ) {
                if (!isStreamingContent) {
                    console.log("ü§ñ Agent:");
                    isStreamingContent = true;
                }
                // Stream tokens character by character
                const token = event.data.chunk.content;
                currentContent += token;
                Deno.stdout.writeSync(new TextEncoder().encode(token));
            }

            // Handle tool calls
            if (event.event === "on_tool_start") {
                if (isStreamingContent) {
                    console.log("\n"); // New line after content
                    isStreamingContent = false;
                }
                console.log(`üîß Pou≈æ√≠v√°m n√°stroj: ${event.name}`);
            }

            // Handle tool results
            if (event.event === "on_tool_end") {
                console.log(`‚úÖ N√°stroj ${event.name} dokonƒçen`);
            }

            // Capture final state for conversation history
            if (event.event === "on_chain_end" && event.name === "LangGraph") {
                finalMessages = event.data.output.messages;
            }
        }

        if (isStreamingContent) {
            console.log("\n"); // Final new line
        }

        // Update conversation history with final messages
        if (finalMessages.length > 0) {
            conversationHistory = finalMessages;
        }

        console.log(); // Empty line for better readability
    } catch (error) {
        console.error(
            "‚ùå Error:",
            error instanceof Error ? error.message : "Unknown error",
        );
        console.log(); // Empty line for better readability
    }
}

async function startInteractiveSession() {
    // Load environment variables from .env file if it exists
    await loadEnv();

    const MCP_BASE_URL = Deno.env.get("MCP_BASE_URL") ||
        "http://localhost:8001";

    await checkMCPServer(MCP_BASE_URL);

    // Handle Ctrl+C gracefully
    Deno.addSignalListener("SIGINT", async () => {
        console.log(goodbyeMessage);
        await cleanShopingList();
        Deno.exit(0);
    });

    // Main input loop
    while (true) {
        try {
            const input = await readInput();
            await processUserInput(input);
        } catch (error) {
            if (error instanceof Deno.errors.Interrupted) {
                console.log(goodbyeMessage);
                await cleanShopingList();
                Deno.exit(0);
            }
            console.error("Error reading input:", error);
        }
    }
}

startInteractiveSession();
