import { DynamicStructuredTool } from "@langchain/core/tools";
import { z } from "zod";
import {
    addPaginationInfo,
    fetchAllRecipeNames,
    handleDietSearch,
    handleIngredientSearch,
    handleRecipeSearchFallback,
    type RecipeSearchData,
} from "./recipeSearchHelpers.ts";

const MCP_BASE_URL = Deno.env.get("MCP_BASE_URL") || "http://localhost:8001";

// Tool for searching recipes by name with guided discovery
const searchRecipesByRecipeNameTool = new DynamicStructuredTool({
    name: "search_recipes_by_recipe_name",
    description: "Implementuje workflow pro vyhled√°v√°n√≠ recept≈Ø podle n√°zvu. " +
        "PRVN√ç KROK: Pokud u≈æivatel chce recepty podle n√°zvu, ale nespecifikoval konkr√©tn√≠ n√°zev, nastav 'show_available_names' na true pro zobrazen√≠ v≈°ech dostupn√Ωch n√°zv≈Ø recept≈Ø. " +
        "DRUH√ù KROK: Pot√© co u≈æivatel vybere konkr√©tn√≠ n√°zev z seznamu, hledej podle tohoto n√°zvu. " +
        "D≈ÆLE≈ΩIT√â!!!: NIKDY NEVYPISUJ U≈ΩIVATELI CEL√ù SEZNAM RECEPT≈Æ! JE P≈ò√çLI≈† DLOUH√ù! " +
        "Podporuje ƒç√°steƒçnou shodu a str√°nkov√°n√≠ v√Ωsledk≈Ø (max 10 recept≈Ø na str√°nku).",
    schema: z.object({
        show_available_names: z
            .boolean()
            .optional()
            .describe(
                "Nastav na true pro zobrazen√≠ v≈°ech dostupn√Ωch n√°zv≈Ø recept≈Ø jako prvn√≠ krok",
            ),
        name: z
            .string()
            .optional()
            .describe(
                "Konkr√©tn√≠ n√°zev receptu pro vyhled√°n√≠ (pou≈æij po zobrazen√≠ dostupn√Ωch n√°zv≈Ø)",
            ),
        page: z
            .number()
            .optional()
            .describe(
                "ƒå√≠slo str√°nky pro str√°nkov√°n√≠ v√Ωsledk≈Ø (v√Ωchoz√≠: 1, max 10 recept≈Ø na str√°nku)",
            ),
    }),
    func: async ({ show_available_names, name, page }) => {
        try {
            // STEP 1: Show available recipe names if requested
            if (show_available_names && !name) {
                try {
                    const namesData = await fetchAllRecipeNames(MCP_BASE_URL);
                    return JSON.stringify(
                        {
                            message:
                                `üìã K dispozici je ${namesData.count} recept≈Ø`,
                            available_recipe_names: namesData.recipe_names,
                            instruction:
                                "Vyber si konkr√©tn√≠ n√°zev receptu a pou≈æij parametr 'name' pro vyhled√°n√≠.",
                            note:
                                "POZOR: Seznam je dlouh√Ω - pou≈æij Ctrl+F pro rychl√© hled√°n√≠ konkr√©tn√≠ho n√°zvu.",
                        },
                        null,
                        2,
                    );
                } catch (error) {
                    return `Error fetching recipe names: ${
                        error instanceof Error ? error.message : "Unknown error"
                    }`;
                }
            }

            // STEP 2: Search by specific recipe name
            if (name) {
                const params = new URLSearchParams();
                params.append("name", name);
                if (page) params.append("page", page.toString());

                const response = await fetch(
                    `${MCP_BASE_URL}/search_recipes?${params.toString()}`,
                );

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const data = await response.json() as RecipeSearchData;

                // FALLBACK: If no recipes found, use intelligent recipe matching
                if (!data.recipes || data.recipes.length === 0) {
                    return await handleRecipeSearchFallback(
                        name,
                        MCP_BASE_URL,
                        data,
                    );
                }

                // SUCCESS: Recipes found, add pagination info and return
                const dataWithPagination = addPaginationInfo(data);
                return JSON.stringify(dataWithPagination, null, 2);
            }

            // ERROR: Neither option was used correctly
            return JSON.stringify(
                {
                    error:
                        "Mus√≠≈° pou≈æ√≠t buƒè 'show_available_names: true' pro zobrazen√≠ dostupn√Ωch n√°zv≈Ø, nebo 'name' pro vyhled√°n√≠ konkr√©tn√≠ho receptu.",
                    workflow:
                        "1. Nejd≈ô√≠ve nastav show_available_names: true\n2. Pak pou≈æij konkr√©tn√≠ n√°zev z seznamu v parametru name",
                },
                null,
                2,
            );
        } catch (error) {
            return `Error in recipe name workflow: ${
                error instanceof Error ? error.message : "Unknown error"
            }`;
        }
    },
});

const searchRecipesByIngredientsTool = new DynamicStructuredTool({
    name: "search_recipes_by_ingredients",
    description:
        "Hledej recepty podle ingredienc√≠ s inteligentn√≠m fallbackem. " +
        "PRVN√ç POKUS: Nejd≈ô√≠ve hledej p≈ô√≠mo podle zadan√© ingredience. " +
        "FALLBACK: Pokud nenajde ≈æ√°dn√© recepty, zobraz√≠ dostupn√© ingredience pro nalezen√≠ podobn√Ωch n√°zv≈Ø. " +
        "Pou≈æij kdy≈æ u≈æivatel hled√° recepty s konkr√©tn√≠ ingredienc√≠ (nap≈ô. 'najdi mi recept se s√Ωrem Gruyere').",
    schema: z.object({
        ingredient: z
            .string()
            .describe(
                "N√°zev ingredience pro vyhled√°n√≠ recept≈Ø (nap≈ô. 'Gruyere', 'ƒçesnek', 'rajƒçata')",
            ),
        fallback_ingredient: z
            .string()
            .optional()
            .describe(
                "P≈ôesn√Ω n√°zev ingredience z seznamu dostupn√Ωch ingredienc√≠ (pou≈æij po fallbacku kdy≈æ prvn√≠ pokus neuspƒõl)",
            ),
        page: z
            .number()
            .optional()
            .describe(
                "ƒå√≠slo str√°nky pro str√°nkov√°n√≠ v√Ωsledk≈Ø (v√Ωchoz√≠: 1, max 10 recept≈Ø na str√°nku)",
            ),
    }),
    func: async ({ ingredient, fallback_ingredient, page }) => {
        try {
            return await handleIngredientSearch(
                ingredient,
                fallback_ingredient,
                page,
                MCP_BASE_URL,
            );
        } catch (error) {
            return `Error in ingredient search workflow: ${
                error instanceof Error ? error.message : "Unknown error"
            }`;
        }
    },
});

// Tool for searching recipes by diet with intelligent fallback
const searchRecipesByDietTool = new DynamicStructuredTool({
    name: "search_recipes_by_diet",
    description:
        "Hledej recepty podle diety s inteligentn√≠m fallbackem a podporou str√°nkov√°n√≠. " +
        "PRVN√ç POKUS: Nejd≈ô√≠ve hledej p≈ô√≠mo podle zadan√© diety. " +
        "STR√ÅNKOV√ÅN√ç: Pokud agent nenajde dostatek recept≈Ø, m≈Ø≈æe listovat dal≈°√≠mi str√°nkami. " +
        "FALLBACK: Pokud nenajde ≈æ√°dn√© recepty, zobraz√≠ dostupn√© diety pro nalezen√≠ podobn√Ωch n√°zv≈Ø. " +
        "Pou≈æij kdy≈æ u≈æivatel hled√° recepty podle diety (nap≈ô. 'najdi mi vegetari√°nsk√© recepty', 'bezlepkov√© j√≠dlo').",
    schema: z.object({
        diet: z
            .string()
            .describe(
                "N√°zev diety pro vyhled√°n√≠ recept≈Ø (nap≈ô. 'vegetarian', 'bezlepkov√©', 'vegan')",
            ),
        fallback_diet: z
            .string()
            .optional()
            .describe(
                "P≈ôesn√Ω n√°zev diety z seznamu dostupn√Ωch diet (pou≈æij po fallbacku kdy≈æ prvn√≠ pokus neuspƒõl)",
            ),
        page: z
            .number()
            .optional()
            .describe(
                "ƒå√≠slo str√°nky pro str√°nkov√°n√≠ v√Ωsledk≈Ø (v√Ωchoz√≠: 1, max 10 recept≈Ø na str√°nku). Pou≈æij pro listov√°n√≠ dal≈°√≠mi str√°nkami.",
            ),
    }),
    func: async ({ diet, fallback_diet, page }) => {
        try {
            return await handleDietSearch(
                diet,
                fallback_diet,
                page,
                MCP_BASE_URL,
            );
        } catch (error) {
            return `Error in diet search workflow: ${
                error instanceof Error ? error.message : "Unknown error"
            }`;
        }
    },
});

// Tool for searching recipes by criteria (excluding name)
const searchRecipesTool = new DynamicStructuredTool({
    name: "search_recipes",
    description:
        "Hledej recepty podle diety (diet), typu j√≠dle nebo chodu (meal_type), nebo ingredienc√≠. Parametry vyhled√°v√°n√≠ se daj√≠ kombinovat. " +
        "Podporuje filtrov√°n√≠ podle ingredienc√≠ kter√© maj√≠/nemaj√≠ b√Ωt v receptu a str√°nkov√°n√≠ v√Ωsledk≈Ø (max 10 recept≈Ø na str√°nku). " +
        "Vrac√≠ recepty s informacemi o str√°nkov√°n√≠ - pokud je v√≠ce v√Ωsledk≈Ø, pou≈æij parametr 'page' pro naƒçten√≠ dal≈°√≠ch str√°nek. " +
        "Pro vyhled√°v√°n√≠ podle n√°zvu pou≈æij search_recipes_by_name.",
    schema: z.object({
        diet: z
            .string()
            .optional()
            .describe(
                "Vr√°t√≠ filtrovan√© recepty podle diety nebo kategorie stravov√°n√≠. Mo≈ænosti: 'bez laktozy', 'bezlepkov√©', 'high-protein', 'low-carb', 'masit√©', 'tuƒçn√©', 'vegan', 'vegetarian'",
            ),
        meal_type: z
            .string()
            .optional()
            .describe(
                "Vr√°t√≠ filtrovan√© recepty podle typu j√≠dla (meal type), Mo≈ænosti: 'desert', 'dochucovadlo', 'hlavn√≠ chod', 'pol√©vka', 'pomaz√°nka', 'p≈ôedkrm', 'p≈ô√≠loha', 'sal√°t', 'sn√≠danƒõ'",
            ),
        includes_ingredients: z
            .string()
            .optional()
            .describe(
                "Seznam ingredienc√≠ oddƒõlen√Ωch ƒç√°rkou, kter√© MUS√ç b√Ωt v receptu (nap≈ô. 'Cibule,M√°slo,ƒåesnek')",
            ),
        excludes_ingredients: z
            .string()
            .optional()
            .describe(
                "Seznam ingredienc√≠ oddƒõlen√Ωch ƒç√°rkou, kter√© NESM√ç b√Ωt v receptu (nap≈ô. 'Ml√©ko,Vejce')",
            ),
        page: z
            .number()
            .optional()
            .describe(
                "ƒå√≠slo str√°nky pro str√°nkov√°n√≠ v√Ωsledk≈Ø (v√Ωchoz√≠: 1, max 10 recept≈Ø na str√°nku)",
            ),
    }),
    func: async (
        {
            diet,
            meal_type,
            includes_ingredients,
            excludes_ingredients,
            page,
        },
    ) => {
        try {
            const params = new URLSearchParams();
            if (diet) params.append("diet", diet);
            if (meal_type) params.append("meal_type", meal_type);
            if (includes_ingredients) {
                params.append("includes_ingredients", includes_ingredients);
            }
            if (excludes_ingredients) {
                params.append("excludes_ingredients", excludes_ingredients);
            }
            if (page) params.append("page", page.toString());

            const response = await fetch(
                `${MCP_BASE_URL}/search_recipes?${params.toString()}`,
            );

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const data = await response.json() as RecipeSearchData;

            // Handle pagination info for better user experience using helper
            const dataWithPagination = addPaginationInfo(data);
            return JSON.stringify(dataWithPagination, null, 2);
        } catch (error) {
            return `Error searching recipes: ${
                error instanceof Error ? error.message : "Unknown error"
            }`;
        }
    },
});

// Tool for adding ingredients to shopping list
const addIngredientsToShoppingListTool = new DynamicStructuredTool({
    name: "add_ingredients_to_shopping_list",
    description:
        "P≈ôid√° v√≠ce ingredienc√≠ na n√°kupn√≠ seznam (shoping list). U≈æiteƒçn√© p≈ôi pl√°nov√°n√≠ j√≠del nebo kdy≈æ si u≈æivatel√© p≈ôej√≠ p≈ôidat konkr√©tn√≠ polo≈æky.",
    schema: z.object({
        ingredients: z
            .array(z.string())
            .describe("Array s n√°zvy ingredienc√≠ k p≈ôid√°n√≠ na n√°kupn√≠ seznam"),
    }),
    func: async ({ ingredients }) => {
        try {
            const response = await fetch(`${MCP_BASE_URL}/add_ingredients`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({ ingredients }),
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const data = await response.json();
            return JSON.stringify(data, null, 2);
        } catch (error) {
            return `Error adding ingredients: ${
                error instanceof Error ? error.message : "Unknown error"
            }`;
        }
    },
});

// Tool for getting the current shopping list
const getShoppingListTool = new DynamicStructuredTool({
    name: "get_shopping_list",
    description: "Vr√°t√≠ obsah aktu√°ln√≠ho n√°kupn√≠ho seznamu se v≈°emi polo≈ækami.",
    schema: z.object({}),
    func: async () => {
        try {
            const response = await fetch(`${MCP_BASE_URL}/get_shopping_list`);

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const data = await response.json();
            const list = JSON.stringify(data, null, 2);
            return list;
        } catch (error) {
            return `Error getting shopping list: ${
                error instanceof Error ? error.message : "Unknown error"
            }`;
        }
    },
});

// Tool for clearing the shopping list
export const clearShoppingListTool = new DynamicStructuredTool({
    name: "clear_shopping_list",
    description:
        "Odstran√≠ v≈°echny polo≈æky z n√°kupn√≠ho seznamu. Pou≈æij, kdy≈æ chce u≈æivatel zaƒç√≠t znovu nebo ji≈æ dokonƒçil n√°kup.",
    schema: z.object({}),
    func: async () => {
        try {
            const response = await fetch(
                `${MCP_BASE_URL}/clear_shopping_list`,
                {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                },
            );

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const data = await response.json();
            return JSON.stringify(data, null, 2);
        } catch (error) {
            return `Error clearing shopping list: ${
                error instanceof Error ? error.message : "Unknown error"
            }`;
        }
    },
});

// Tool for removing ingredients from shopping list
const removeIngredientsFromShoppingListTool = new DynamicStructuredTool({
    name: "remove_ingredients_from_shopping_list",
    description:
        "Odstran√≠ specifick√© ingredience z n√°kupn√≠ho seznamu. Ingredience, kter√© nejsou v seznamu, budou ignorov√°ny. U≈æiteƒçn√© pro √∫pravu n√°kupn√≠ho seznamu nebo kdy≈æ se u≈æivatel rozhodne nƒõkter√© polo≈æky necht√≠t.",
    schema: z.object({
        ingredients: z
            .array(z.string())
            .describe(
                "Array s n√°zvy ingredienc√≠ k odstranƒõn√≠ z n√°kupn√≠ho seznamu",
            ),
    }),
    func: async ({ ingredients }) => {
        try {
            const response = await fetch(`${MCP_BASE_URL}/remove_ingredients`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({ ingredients }),
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const data = await response.json();
            return JSON.stringify(data, null, 2);
        } catch (error) {
            return `Error removing ingredients: ${
                error instanceof Error ? error.message : "Unknown error"
            }`;
        }
    },
});

// Tool for creating structured meal plans
const createMealPlanTool = new DynamicStructuredTool({
    name: "create_meal_plan",
    description:
        "Vytvo≈ô√≠ strukturovan√Ω j√≠deln√≠ƒçek na v√≠ce dn√≠ a ulo≈æ√≠ ho jako markdown soubor. " +
        "D≈ÆLE≈ΩIT√â: MUS√ç≈† POU≈Ω√çT POUZE SKUTEƒåN√â N√ÅZVY RECEPT≈Æ Z DATAB√ÅZE! " +
        "P≈òED VYTVO≈òEN√çM J√çDELN√çƒåKU V≈ΩDY NEJD≈ò√çVE VYHLEDEJ EXISTUJ√çC√ç RECEPTY pomoc√≠ search_recipes nebo search_recipes_by_recipe_name podle po≈æadovan√© diety/ingredienc√≠. " +
        "Pak pou≈æij jen ty n√°zvy recept≈Ø, kter√© skuteƒçnƒõ existuj√≠ v datab√°zi. " +
        "Nevym√Ω≈°lej si n√°zvy recept≈Ø jako 'Avok√°dov√Ω toast' nebo 'Smoothie bowl' - ty v ƒçesk√© datab√°zi nejsou!",
    schema: z.object({
        title: z
            .string()
            .describe(
                "N√°zev j√≠deln√≠ƒçku (nap≈ô. 'Vegetari√°nsk√Ω j√≠deln√≠ƒçek na t√Ωden')",
            ),
        days: z
            .array(
                z.object({
                    day_name: z
                        .string()
                        .describe("N√°zev dne (nap≈ô. 'Den 1 - Pondƒõl√≠')"),
                    meals: z
                        .array(
                            z.object({
                                meal_type: z
                                    .enum([
                                        "sn√≠danƒõ",
                                        "obƒõd",
                                        "veƒçe≈ôe",
                                        "svaƒçina",
                                    ])
                                    .describe(
                                        "Typ j√≠dla - sn√≠danƒõ, obƒõd, veƒçe≈ôe nebo svaƒçina",
                                    ),
                                recipe_name: z
                                    .string()
                                    .describe(
                                        "N√°zev receptu - MUS√ç b√Ωt skuteƒçn√Ω n√°zev z datab√°ze! P≈ôedt√≠m vyhledej existuj√≠c√≠ recepty pomoc√≠ search_recipes.",
                                    ),
                            }),
                        )
                        .describe("Seznam j√≠del pro dan√Ω den"),
                }),
            )
            .describe("Array objekt≈Ø pro jednotliv√© dny"),
    }),
    func: async ({ title, days }) => {
        // Meal type emoji mapping
        const mealEmojis = {
            sn√≠danƒõ: "ü•ê",
            obƒõd: "üçΩÔ∏è",
            veƒçe≈ôe: "üåô",
            svaƒçina: "üç™",
        };
        try {
            // Collect all unique recipe names from the meal plan
            const allRecipeNames = new Set<string>();

            days.forEach((day) => {
                day.meals.forEach((meal) => {
                    allRecipeNames.add(meal.recipe_name);
                });
            });

            // Fetch complete recipe details for each unique recipe
            const recipeDetails = new Map();

            for (const recipeName of allRecipeNames) {
                try {
                    const response = await fetch(
                        `${MCP_BASE_URL}/search_recipes?name=${
                            encodeURIComponent(
                                recipeName,
                            )
                        }`,
                    );

                    if (response.ok) {
                        const data = await response.json();
                        if (data.recipes && data.recipes.length > 0) {
                            // Take the first matching recipe
                            recipeDetails.set(recipeName, data.recipes[0]);
                        } else {
                            console.log(
                                `LOG: No recipe found for "${recipeName}" ‚ö†Ô∏è`,
                            );
                            // Create a placeholder if recipe not found
                            recipeDetails.set(recipeName, {
                                name: recipeName,
                                ingredients: [],
                                steps: "Recept nebyl nalezen v datab√°zi.",
                            });
                        }
                    }
                } catch (error) {
                    console.error(
                        `LOG: Error fetching recipe "${recipeName}":`,
                        error,
                    );
                    recipeDetails.set(recipeName, {
                        name: recipeName,
                        ingredients: [],
                        steps: "Chyba p≈ôi naƒç√≠t√°n√≠ receptu.",
                    });
                }
            }

            // Create formatted meal plan text
            let mealPlanText = `# ${title}\n\n`;
            days.forEach((day) => {
                mealPlanText += `üóìÔ∏è **${day.day_name}:**\n`;

                // Sort meals by type for logical ordering
                const mealOrder = ["sn√≠danƒõ", "obƒõd", "veƒçe≈ôe", "svaƒçina"];
                const sortedMeals = day.meals.sort((a, b) => {
                    const aIndex = mealOrder.indexOf(a.meal_type);
                    const bIndex = mealOrder.indexOf(b.meal_type);
                    return aIndex - bIndex;
                });

                sortedMeals.forEach((meal) => {
                    const emoji = mealEmojis[meal.meal_type] || "üçΩÔ∏è";
                    const capitalizedMealType =
                        meal.meal_type.charAt(0).toUpperCase() +
                        meal.meal_type.slice(1);
                    mealPlanText +=
                        `  ‚Ä¢ ${emoji} ${capitalizedMealType}: ${meal.recipe_name}\n`;
                });
                mealPlanText += `\n`;
            });

            mealPlanText += `---\n\n`;
            mealPlanText += `## Recepty\n\n`;

            // Second section: Detailed recipes
            // Collect all unique recipes that were actually found
            const foundRecipes = new Map();
            allRecipeNames.forEach((recipeName) => {
                const recipe = recipeDetails.get(recipeName);
                if (
                    recipe &&
                    recipe.ingredients &&
                    recipe.ingredients.length > 0
                ) {
                    foundRecipes.set(recipeName, recipe);
                }
            });

            // Generate detailed recipe sections
            foundRecipes.forEach((recipe) => {
                mealPlanText += `### ${recipe.name}\n\n`;

                if (recipe.ingredients && recipe.ingredients.length > 0) {
                    mealPlanText += `**Ingredience:**\n`;
                    recipe.ingredients.forEach((ingredient: string) => {
                        mealPlanText += `- ${ingredient}\n`;
                    });
                    mealPlanText += `\n`;
                }

                if (recipe.steps) {
                    mealPlanText += `**Postup:**\n${recipe.steps}\n\n`;
                }
            });

            // Add timestamp
            const timestamp = new Date().toLocaleString("cs-CZ");
            mealPlanText += `*J√≠deln√≠ƒçek vytvo≈ôen: ${timestamp}*\n`;

            // Create plans directory if it doesn't exist at repository root
            const plansDir = "./plans";
            try {
                await Deno.stat(plansDir);
            } catch {
                await Deno.mkdir(plansDir, { recursive: true });
            }

            // Save to file in plans directory
            const filename = `jidelnicek_${timestamp}.md`;
            const filepath = `${plansDir}/${filename}`;
            await Deno.writeTextFile(filepath, mealPlanText);
            console.log(
                `üíæ Kompletn√≠ j√≠deln√≠ƒçek s ${allRecipeNames.size} recepty byl ulo≈æen jako: plans/${filename}`,
            );

            // Create console output (simplified - no recipe steps)
            const consoleOutput = `üìÖ J√çDELN√çƒåEK: ${title}\n\n${
                days
                    .map((day) => {
                        let dayText = `üóìÔ∏è ${day.day_name}:\n`;

                        // Group meals by type for cleaner display
                        const mealsByType = day.meals.reduce(
                            (acc, meal) => {
                                if (!acc[meal.meal_type]) {
                                    acc[meal.meal_type] = [];
                                }
                                acc[meal.meal_type].push(meal.recipe_name);
                                return acc;
                            },
                            {} as Record<string, string[]>,
                        );

                        // Display meals in preferred order
                        const mealOrder = [
                            "sn√≠danƒõ",
                            "obƒõd",
                            "veƒçe≈ôe",
                            "svaƒçina",
                        ];
                        mealOrder.forEach((mealType) => {
                            if (mealsByType[mealType]) {
                                const capitalizedType =
                                    mealType.charAt(0).toUpperCase() +
                                    mealType.slice(1);
                                dayText += `  ‚Ä¢ ${capitalizedType}: ${
                                    mealsByType[
                                        mealType
                                    ].join(", ")
                                }\n`;
                            }
                        });

                        return dayText;
                    })
                    .join("\n")
            }`;

            return consoleOutput;
        } catch (error) {
            return `Error creating meal plan: ${
                error instanceof Error ? error.message : "Unknown error"
            }`;
        }
    },
});

// Export all MCP tools as an array
export const mcpTools = [
    searchRecipesByRecipeNameTool,
    searchRecipesByIngredientsTool,
    searchRecipesByDietTool,
    searchRecipesTool,
    addIngredientsToShoppingListTool,
    removeIngredientsFromShoppingListTool,
    getShoppingListTool,
    clearShoppingListTool,
    createMealPlanTool,
];
