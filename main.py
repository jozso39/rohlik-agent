"""
Interactive CLI interface for the LangGraph MCP agent - Python version
"""
import os
import sys
import asyncio
import argparse
from typing import List
from dotenv import load_dotenv
from langchain_core.messages import HumanMessage
from src.agent import app
from src.tools.mcp_tools import clear_shopping_list
from src.utils.mcp_health_check import check_mcp_server_sync
from src.utils.verbose import printVerbose, set_verbose

GOODBYE_MESSAGE = "\nüëã Naschledanou! V√°≈° n√°kupn√≠ seznam byl vyƒçi≈°tƒõn. D√≠ky ≈æe jste vyu≈æili RohBota!"

# Store conversation history
conversation_history: List = []

def print_welcome():
    """Print welcome message and instructions"""
    print("ü§ñ Rohl√≠k Asistent pro pl√°nov√°n√≠ j√≠deln√≠ƒçku a spr√°vu n√°kupn√≠ho seznamu (RohBot)")
    print("====================================================")
    print("üí¨ Pom≈Ø≈æu ti napl√°novat tv≈Øj j√≠deln√≠ƒçek podle exkluzivn√≠ch rohl√≠kovsk√Ωch recept≈Ø!")
    print("M≈Ø≈æe≈° mi porouƒçet nap≈ô√≠klad takto:")
    print("   ‚Ä¢ 'p≈ôiprav mi t√Ωdenn√≠ pl√°n vegetari√°nsk√Ωch j√≠del'")
    print("   ‚Ä¢ 'vytvo≈ô mi dokument s j√≠deln√≠ƒçkem na 2 dny pro vegana'")
    print("   ‚Ä¢ 'p≈ôidej mrkev na n√°kupn√≠ seznam'")
    print("   ‚Ä¢ 'najdi mi recepty na vegetari√°nsk√© pol√©vky'")
    print("   ‚Ä¢ 'co je na m√©m n√°kupn√≠m seznamu?'")
    print("   ‚Ä¢ 'odstra≈à v≈°e z n√°kupn√≠ho seznamu'")
    print("   ‚Ä¢ 'odstra≈à okurku z n√°kupn√≠ho seznamu'")
    print("üìù Napi≈° 'KONEC' nebo 'STAƒåILO' k ukonƒçen√≠ programu,")
    print("nebo 'POMOC' pro n√°povƒõdu, nebo 'RESET' pro restart konverzace.\n")

def print_help():
    """Print help message"""
    print("\nüÜò N√ÅPOVƒöDA:")
    print("="*50)
    print("üìã Dostupn√© p≈ô√≠kazy:")
    print("   ‚Ä¢ POMOC - zobraz√≠ tuto n√°povƒõdu")
    print("   ‚Ä¢ RESET - vyma≈æe historii konverzace a n√°kupn√≠ seznam")
    print("   ‚Ä¢ KONEC nebo STAƒåILO - ukonƒç√≠ program")
    print("\nüçΩÔ∏è P≈ô√≠klady dotaz≈Ø:")
    print("   ‚Ä¢ 'najdi mi vegetari√°nsk√© recepty'")
    print("   ‚Ä¢ 'vytvo≈ô j√≠deln√≠ƒçek na 3 dny'")
    print("   ‚Ä¢ 'p≈ôidej brambory na n√°kupn√≠ seznam'")
    print("   ‚Ä¢ 'co m√°m na seznamu?'")
    print("   ‚Ä¢ 'odstra≈à ml√©ko ze seznamu'")
    print("\nüîß Spu≈°tƒõn√≠ s verbose m√≥dem:")
    print("   python main.py --verbose  # zobraz√≠ detaily o spou≈°tƒõn√≠ n√°stroj≈Ø")
    print("="*50 + "\n")

async def clean_shopping_list():
    """Clear the shopping list"""
    try:
        result = clear_shopping_list.invoke({})
    except Exception as error:
        print(f"‚ö†Ô∏è Chyba p≈ôi ƒçi≈°tƒõn√≠ n√°kupn√≠ho seznamu: {error}")

def read_input() -> str:
    """Read user input with prompt"""
    try:
        return input("You: ").strip()
    except EOFError:
        return "KONEC"
    except KeyboardInterrupt:
        return "KONEC"

async def process_user_input(user_input: str) -> bool:
    """
    Process user input and return whether to continue.
    
    Returns:
        bool: True to continue, False to exit
    """
    global conversation_history
    
    # Handle special commands
    if user_input.upper() in ["KONEC", "STAƒåILO"]:
        print(GOODBYE_MESSAGE)
        await clean_shopping_list()
        return False
    
    if user_input.upper() == "POMOC":
        print_help()
        return True
    
    if user_input.upper() == "RESET":
        conversation_history = []
        await clean_shopping_list()
        print("üîÑ Konverzace byla resetov√°na a n√°kupn√≠ seznam vyƒçi≈°tƒõn.\n")
        return True
    
    if not user_input:
        return True
    
    # Process the message with the agent using streaming
    try:
        # Add user message to history
        user_message = HumanMessage(content=user_input)
        conversation_history.append(user_message)
        
        print("\nü§î P≈ôem√Ω≈°l√≠m... ", end="", flush=True)
        
        # Track if we're currently streaming content from the LLM
        is_streaming_content = False
        
        # Stream events from the agent
        async for event in app.astream_events(
            {"messages": conversation_history}, 
            {"recursion_limit": 50},
            version="v1"
        ):
            kind = event["event"]
            
            # Handle LLM token streaming
            if kind == "on_chat_model_stream":
                data = event.get("data", {})
                chunk = data.get("chunk")
                if chunk and hasattr(chunk, 'content') and chunk.content:
                    print(chunk.content, end="", flush=True)
                    is_streaming_content = True
            
            # Handle tool execution start
            elif kind == "on_tool_start":
                if is_streaming_content:
                    print()  # New line after content streaming
                    is_streaming_content = False
                tool_name = event["name"]
                printVerbose(f"\nüîß Executing tool: {tool_name}")
            
            # Handle tool execution end
            elif kind == "on_tool_end":
                tool_name = event["name"]
                printVerbose(f"‚úÖ Tool completed: {tool_name}")
        
        # Get the final state using ainvoke (not aget_state which requires checkpointer)
        final_result = await app.ainvoke(
            {"messages": conversation_history}, 
            {"recursion_limit": 50}
        )
        
        # Update conversation history with the final response
        if final_result and "messages" in final_result:
            conversation_history = final_result["messages"]
        
        if is_streaming_content:
            print()  # New line after streaming
        print()  # Extra line for spacing
            
    except Exception as error:
        print(f"\n‚ùå Chyba p≈ôi zpracov√°n√≠ dotazu: {error}\n")
        
    return True

async def start_interactive_session():
    """Start the interactive session"""
    # Load environment variables from .env file
    load_dotenv()
    
    # Get MCP server URL
    mcp_base_url = os.getenv("MCP_BASE_URL", "http://localhost:8001")
    
    # Check MCP server health
    if not check_mcp_server_sync(mcp_base_url):
        print("‚ùå MCP server is not available. Please start the server and try again.")
        sys.exit(1)
    
    # Print welcome message
    print_welcome()
    
    # Main interaction loop
    while True:
        try:
            user_input = read_input()
            should_continue = await process_user_input(user_input)
            
            if not should_continue:
                break
                
        except Exception as error:
            print(f"‚ùå Neoƒçek√°van√° chyba: {error}")
            print("Zkuste to znovu nebo napi≈°te 'KONEC' pro ukonƒçen√≠.\n")

def main():
    """Main entry point"""
    # Parse command line arguments
    parser = argparse.ArgumentParser(description="RohBot - Rohl√≠k asistent pro pl√°nov√°n√≠ j√≠deln√≠ƒçku a spr√°vu n√°kupn√≠ho seznamu")
    parser.add_argument("-v", "--verbose", action="store_true", 
                        help="Enable verbose output (shows tool execution details)")
    args = parser.parse_args()
    
    # Set verbose mode based on command line argument
    set_verbose(args.verbose)
    
    try:
        asyncio.run(start_interactive_session())
    except KeyboardInterrupt:
        print(GOODBYE_MESSAGE)
        # Run cleanup in sync mode since we're exiting
        try:
            clear_shopping_list.invoke({})
        except:
            pass
        sys.exit(0)
    except Exception as error:
        print(f"‚ùå Fatal error: {error}")
        sys.exit(1)

if __name__ == "__main__":
    main()
